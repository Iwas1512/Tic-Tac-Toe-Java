/*
 * This source file was generated by the Gradle 'init' task
 */
package tic.tac.toe;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;




public class AppTest {
    
    @Test
    public void testGetValidMoveWithValidInput() {
        game testGame = new game();
        String validInput = "5";
        int expectedMove = 4;
        
       
        assertEquals(true, testGame.isValidMove(expectedMove));
    }
    
    @Test
    public void testGetValidMoveWithInvalidPosition() {
        game testGame = new game();
        
       
        testGame.makeMove(0);
        
        //  position 0 should be invalid, if its not, somethings wrong with move. only 1-9 should be validd
        assertEquals(false, testGame.isValidMove(0));
    }
    
    @Test
    public void testPlayAgainLogic() {
        
       
        assertEquals(true, "yes".equals("yes")); 
        assertEquals(false, "maybe".equals("yes")); 
        assertEquals(true, "no".equals("no")); 
    }
    
    @Test
    public void testGameInitialization() {
        game gameInstance = new game();
        assertEquals('X', gameInstance.getCurrentPlayer());
        assertEquals(false, gameInstance.isGameOver());
        assertEquals("", gameInstance.getResultMessage());
    }
    
    
    
    @Test
    public void testDraw() {
        game gameInstance = new game();
        
        
        gameInstance.makeMove(0); 
        gameInstance.makeMove(1); 
        gameInstance.makeMove(2); 
        gameInstance.makeMove(4);
        gameInstance.makeMove(7); 
        gameInstance.makeMove(6);
        gameInstance.makeMove(3);
        gameInstance.makeMove(5); 
        gameInstance.makeMove(8); //fills the board so its a draw scenario
        
        assertEquals(true, gameInstance.isGameOver());
        assertEquals("It's a draw!", gameInstance.getResultMessage());
    }
    
    @Test //mainly want to test if replacement function is working.
    public void testBoardDisplay() {
        game gameInstance = new game();
        String initialBoard = gameInstance.getBoardDisplay();
        
       
        for (int i = 1; i <= 9; i++) {
            assertEquals(true, initialBoard.contains(String.valueOf(i)));
        }
        
        
        gameInstance.makeMove(0);
        String updatedBoard = gameInstance.getBoardDisplay();
        assertEquals(false, updatedBoard.contains("1")); //testing if numbers are being replaced correctly
        assertEquals(true, updatedBoard.contains("X")); 
    }
}